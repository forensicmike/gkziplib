<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net471</TargetFramework>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="MikeForensicLib\**" />
    <EmbeddedResource Remove="MikeForensicLib\**" />
    <None Remove="MikeForensicLib\**" />
  </ItemGroup>
  <ItemGroup>
    <Compile Remove="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="EntityFramework">
      <Version>6.3.0</Version>
    </PackageReference>
    <PackageReference Include="System.Data.SQLite.Core" Version="1.0.112.1" />
    <PackageReference Include="System.Data.SQLite.EF6">
      <Version>1.0.112</Version>
    </PackageReference>
    <PackageReference Include="System.Data.SQLite.Linq">
      <Version>1.0.112</Version>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Properties\" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="MikeForensicLib\MikeForensicLib.csproj" />
  </ItemGroup>
  <PropertyGroup>
	<PackageLicenseExpression>GPL-3.0-or-later</PackageLicenseExpression>
	<PackageId>GKZipLib</PackageId>
	<Title>GKZipLib</Title>
	<PackageTags>zip;gk;extractor</PackageTags>
    <Version>1.0.1</Version>
    <Authors>Mike Williamson (@forensicmike1)</Authors>
    <Company>
    </Company>
	<PackageDescription>
	GKZipLib was written for fast parsing of ZIP archives generated by GrayKey in .NET. Publicly available parsing libraries I tried in C# were either too slow at parsing large ZIPs or completely failed when attempting to parse GK zips (or both). Developing this library was a fantastic exercise that really enhanced my own personal understanding of how zip files work.

One of the big focuses of this library is being as fast as possible. Let's keep in mind GK zips can go from 5-10 GB to hundreds of GB in size. So how do we keep it fast? GKZipLib accomplishes this by parsing ONLY as much as it needs to, unless a file is identified (by path, etc) as needing to be extracted.

First, it parses the entire central directory into RAM. The CD is typically quite small so this is doable. On a file-by-file basis, you can then decide whether or not to load additional details such as the data's absolute offset within the file, the file's compressed/uncompressed size, and so on.

Probably the most potent usage of this is what I'm going to call "LINQ to GKZip" -- taking advantage of the fact that the library implements IEnumerable and thus can be called with a simple foreach. Please see Example.cs for the simplest usage.

Contact the author on Discord - forensicmike#6426 or Twitter DM @forensicmike1</PackageDescription>
<RepositoryUrl>https://github.com/forensicmike/gkziplib</RepositoryUrl>
  </PropertyGroup>
</Project>
